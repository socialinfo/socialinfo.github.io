<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | 燕东的博客]]></title>
  <link href="http://yandongdabin.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://yandongdabin.github.io/"/>
  <updated>2015-03-17T12:43:13+08:00</updated>
  <id>http://yandongdabin.github.io/</id>
  <author>
    <name><![CDATA[燕东]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git学习]]></title>
    <link href="http://yandongdabin.github.io/blog/2015/03/17/gitxue-xi/"/>
    <updated>2015-03-17T11:56:08+08:00</updated>
    <id>http://yandongdabin.github.io/blog/2015/03/17/gitxue-xi</id>
    <content type="html"><![CDATA[<!---more-->


<h2>1. 初始化仓库</h2>

<p>用到的命令</p>

<pre><code>git init （此命令会初始化当前文件夹为git仓库，实际上是建立了一个.git的隐藏文件夹）
git add file（添加文件到暂存区）
git commit -m ‘  ’（提交暂存区的修改到版本库）
</code></pre>

<h2>2.版本回退 管理修改等</h2>

<p>用到的命令</p>

<pre><code>git status（查看工作区当前的状态）
git diff file （比较文件的修改状态）
git log （查看版本的提交日志）
git reset --hard （HEAD^或者是commit-id   HEAD^^表示上上版本，HEAD~100表示上100个版本） 回退版本库到制定的版本
git reflog 用来记录每一次提交的日志
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3 :  将修改提交到了版本库,用git reset --hard commit_id
git rm file 删除文件    
</code></pre>

<h2>3.分支管理</h2>

<ul>
<li><h3><strong>创建分支与合并</strong></h3>

<pre><code>  查看分支：git branch (当前分支前面会有一个 *)

  创建分支：git branch &lt;name&gt;

  切换分支：git checkout &lt;name&gt;

  创建+切换分支：git checkout -b &lt;name&gt;

  合并某分支到当前分支：git merge &lt;name&gt;

  删除分支：git branch -d &lt;name&gt;

  **特殊的 合并是可以开启 --no-ff (no fast-forward选项)**
</code></pre></li>
<li><h3><strong>冲突解决</strong></h3></li>
</ul>


<blockquote><p>当合并分支时可能会引起冲突,此时用git status查看产生冲突的文件,然后修改 &lt;&lt;&lt;&lt;&lt;  =========  >>>>>>之间的部分,修改后add commit 冲突解决</p></blockquote>

<ul>
<li><h3><strong>stash</strong></h3>

<p>  git stash 将当前为提交的工作区保存起来
  git  stash apply + git stash drop = git stash pop 应用原先保存的工作区,并且删除之前保存的内容
  git stash list 查看当前保存的列表</p></li>
<li><h3><strong>多人协作</strong></h3>

<blockquote><h4>当clone下一个远程库的时候本地只会有一个master分支,所以需要在本地建立对应远程开发的分支</h4></blockquote>

<p>  当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin
  git remote -v 查看远程仓库的详细信息
  git push origin branchname 其中branchbane指的是本地的branchname,这条命令会把本地的分支推送到远程对应的分支上去</p>

<pre><code>  首先，可以试图用git push origin branch-name推送自己的修改；

  如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

  如果合并有冲突，则解决冲突，并在本地提交；

  没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

  如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
</code></pre></li>
<li><h3><strong>标签</strong></h3>

<pre><code>  命令git tag &lt;name&gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id

  命令git push origin &lt;tagname&gt;可以推送一个本地标签；

  命令git push origin --tags可以推送全部未推送过的本地标签；

  命令git tag -d &lt;tagname&gt;可以删除一个本地标签；

  命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。

  git show tagname 可以查看tag的详细信息
</code></pre></li>
</ul>

]]></content>
  </entry>
  
</feed>
