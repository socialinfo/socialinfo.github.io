<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++ | 燕东的博客]]></title>
  <link href="http://yandongdabin.github.io/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://yandongdabin.github.io/"/>
  <updated>2015-04-04T15:09:35+08:00</updated>
  <id>http://yandongdabin.github.io/</id>
  <author>
    <name><![CDATA[燕东]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于二维指针的那些事情]]></title>
    <link href="http://yandongdabin.github.io/blog/2015/04/04/guan-yu-er-wei-zhi-zhen-de-na-xie-shi-qing/"/>
    <updated>2015-04-04T09:39:29+08:00</updated>
    <id>http://yandongdabin.github.io/blog/2015/04/04/guan-yu-er-wei-zhi-zhen-de-na-xie-shi-qing</id>
    <content type="html"><![CDATA[<p>最近在用二维数组传参的时候遇到了一些问题，感觉自己还是学的太菜了，纸上谈兵，从网上搜索了一篇博客，上面从编译器的角度解释了各类指针之间的关系。</p>

<!--more-->


<p>百度文库上有一篇不错的文章  [<a href="http://wenku.baidu.com/link?url=YNtzd8ILq7SWRwbPD6Md7Y6w4ejdLcDuxyRpuRrP7tikNd1fny6nIvldDsERAenwimkT5__3xOttNsRFV2yBrcZabqVvoD0HQ0oxXgK8hM7">http://wenku.baidu.com/link?url=YNtzd8ILq7SWRwbPD6Md7Y6w4ejdLcDuxyRpuRrP7tikNd1fny6nIvldDsERAenwimkT5__3xOttNsRFV2yBrcZabqVvoD0HQ0oxXgK8hM7</a>]</p>

<p>首先是文字说明，编译器对不同类型的解释形式:</p>

<blockquote><p>“数组名被改写成一个指针参数”规则并不是递归定义的。数组的数组会被改写成“数组的指针”，而不是“指针的指针”：</p></blockquote>

<p> <table>
 <tr>
 <td> 实参 </td>
 <td>所匹配的形参</td>
 </tr>
 <tr>
 <td>  数组的数组          char c[8][10];   </td>
 <td>char (<em>)[10];          数组指针</td>
 </tr>
 <tr>
 <td>  指针数组             char </em>c[10];  </td>
 <td>  char <strong>c;               指针的指针</td>
 </tr>
 <tr>
 <td>  数组指针(行指针)  char (<em>c)[10];  </td>
 <td>char (</em>c)[10];        不改变</td>
 </tr>
<tr>
 <td> 指针的指针           char </strong>c;  </td>
 <td> char **c;               不改变</td>
 </tr></p>

<p> </table></p>

<h2>下面是代码说明</h2>

<pre><code>    #include "stdafx.h" 
    #include &lt;iostream&gt; 
    using namespace std; 

    int _tmain(int argc, _TCHAR* argv[]) 
    { 
        int arr1[3]; 
        int arr2[3]; 
        int arr3[3]; 
        int * ptr; 
        // ptr1是一个指向 int [3] 的指针，即ptr的类型和&amp;arr1的类型是一样的，注意：arr1指向的内存区域定长 
        int ptr1[3][3]=\{\{1,2,3\},\{1,2,3\},\{1,2,3\}\}; 
        // ptr2是一个指向 int * 的指针，即ptr2的类型和&amp;ptr是一样的，注意：ptr指向的内存区域不定长 
        int * ptr2[3]=\{arr1,arr2,arr3\}; 
        // ptr3是一个指向 int [3] 的指针，即ptr3的类型和&amp;arr1的类型是一样的，注意：arr1指向的内存区域定长 
        int(* ptr3)[3]=&amp;arr1; 
        ptr3=ptr1; // 没错，他们的类型相同 
     // ptr3=ptr2;//error 无法从“int *[3]”转换为“int (*)[3] 
     // ptr4是一个指向 int * 的指针，即ptr4的类型和&amp;ptr是一样的，注意：ptr指向的内存区域不定长 
        int ** ptr4; 
        //ptr4=&amp;arr1; //error 无法从“int (*)[3]”转换为“int ** 
        ptr4=ptr2; // 没错，他们的类型相同 
     //ptr4=ptr3; // error 无法从“int (*)[3]”转换为“int ** 
        return 0; 
    }

   #include&lt;iostream&gt;
    using namespace std;
    const int N = 10;
    int main()
    {

        /*A是一个指针数组 */
        int **A = new int *[N];
        /*注意此处申请了各个空间不连续，和A[N][N]的方式要区分开来*/
        for(int i=0;i&lt;N;i++)
        {
            A[i] = new int [N];
        }
        A[1][1] = 10;

        /*下面的输出中 一二个地址相同， 三四个地址相同
        说明了每次new出的地址可能不相邻
        */
        double *B  = (double *)A;

        cout&lt;&lt;"The two address is same"&lt;&lt;endl;
        cout&lt;&lt;A&lt;&lt;endl;
        cout&lt;&lt;B&lt;&lt;endl;

        cout&lt;&lt;"The two address is same"&lt;&lt;endl;
        cout&lt;&lt;A[0]&lt;&lt;endl;
        cout&lt;&lt;&amp;A[0][0]&lt;&lt;endl;


        /*下面两个的输出不相同
        原因就是每个new操作申请的空间可能不相邻
        但是如果对于 A[N][N]来说，这两者应该是相同的
        */
        cout&lt;&lt;"The output of the following two line wouldn't be the same"&lt;&lt;endl;
        cout&lt;&lt;*(*(A+1)+1)&lt;&lt;endl;
        cout&lt;&lt;*(B+1*N+1)&lt;&lt;endl; // double *B  = (double *)A;


        /*验证了上面的说法 三者输出一致*/
        int C[N][N];
        C[1][1] = 10;


        int *D = (int *)C;

        cout&lt;&lt;"The output of the following three line would be the same"&lt;&lt;endl;
        cout&lt;&lt;C[1][1]&lt;&lt;endl;
        cout&lt;&lt;*(D+1*N+1)&lt;&lt;endl;
        cout&lt;&lt;*(*(C+1)+1)&lt;&lt;endl;


        int *F[N];//F是指向 int *类型的 数组，数组大小为N
        for(int i=0;i&lt;N;i++)
        {
            F[i] = new int[N];
        }
        F[1][1] =10;

        /*两者相等*/
        cout&lt;&lt;F[1][1]&lt;&lt;endl;
        cout&lt;&lt;*(*(F+1)+1)&lt;&lt;endl;

        /*不可预料*/
        int *G = (int *)F;
        cout&lt;&lt;*(G+1*N+1)&lt;&lt;endl;

        /*如果把此处的 (int(*)[N][N])C换成C 则编译不通过，因为 在编译器看来C的类型 int(*)[10]而不是 int[N][N]*/
        int (*H)[N][N] = (int(*)[N][N]) C;//H是指向 int[N][N]类型的指针
        /*可以用这种方式来访问C中的元素*/
        cout&lt;&lt;(*H)[1][1]&lt;&lt;endl;

        return 0;
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
