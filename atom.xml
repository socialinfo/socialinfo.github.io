<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[燕东的博客]]></title>
  <link href="http://yandongdabin.github.io/atom.xml" rel="self"/>
  <link href="http://yandongdabin.github.io/"/>
  <updated>2015-03-17T12:43:13+08:00</updated>
  <id>http://yandongdabin.github.io/</id>
  <author>
    <name><![CDATA[燕东]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git学习]]></title>
    <link href="http://yandongdabin.github.io/blog/2015/03/17/gitxue-xi/"/>
    <updated>2015-03-17T11:56:08+08:00</updated>
    <id>http://yandongdabin.github.io/blog/2015/03/17/gitxue-xi</id>
    <content type="html"><![CDATA[<!---more-->


<h2>1. 初始化仓库</h2>

<p>用到的命令</p>

<pre><code>git init （此命令会初始化当前文件夹为git仓库，实际上是建立了一个.git的隐藏文件夹）
git add file（添加文件到暂存区）
git commit -m ‘  ’（提交暂存区的修改到版本库）
</code></pre>

<h2>2.版本回退 管理修改等</h2>

<p>用到的命令</p>

<pre><code>git status（查看工作区当前的状态）
git diff file （比较文件的修改状态）
git log （查看版本的提交日志）
git reset --hard （HEAD^或者是commit-id   HEAD^^表示上上版本，HEAD~100表示上100个版本） 回退版本库到制定的版本
git reflog 用来记录每一次提交的日志
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3 :  将修改提交到了版本库,用git reset --hard commit_id
git rm file 删除文件    
</code></pre>

<h2>3.分支管理</h2>

<ul>
<li><h3><strong>创建分支与合并</strong></h3>

<pre><code>  查看分支：git branch (当前分支前面会有一个 *)

  创建分支：git branch &lt;name&gt;

  切换分支：git checkout &lt;name&gt;

  创建+切换分支：git checkout -b &lt;name&gt;

  合并某分支到当前分支：git merge &lt;name&gt;

  删除分支：git branch -d &lt;name&gt;

  **特殊的 合并是可以开启 --no-ff (no fast-forward选项)**
</code></pre></li>
<li><h3><strong>冲突解决</strong></h3></li>
</ul>


<blockquote><p>当合并分支时可能会引起冲突,此时用git status查看产生冲突的文件,然后修改 &lt;&lt;&lt;&lt;&lt;  =========  >>>>>>之间的部分,修改后add commit 冲突解决</p></blockquote>

<ul>
<li><h3><strong>stash</strong></h3>

<p>  git stash 将当前为提交的工作区保存起来
  git  stash apply + git stash drop = git stash pop 应用原先保存的工作区,并且删除之前保存的内容
  git stash list 查看当前保存的列表</p></li>
<li><h3><strong>多人协作</strong></h3>

<blockquote><h4>当clone下一个远程库的时候本地只会有一个master分支,所以需要在本地建立对应远程开发的分支</h4></blockquote>

<p>  当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin
  git remote -v 查看远程仓库的详细信息
  git push origin branchname 其中branchbane指的是本地的branchname,这条命令会把本地的分支推送到远程对应的分支上去</p>

<pre><code>  首先，可以试图用git push origin branch-name推送自己的修改；

  如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

  如果合并有冲突，则解决冲突，并在本地提交；

  没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

  如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
</code></pre></li>
<li><h3><strong>标签</strong></h3>

<pre><code>  命令git tag &lt;name&gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id

  命令git push origin &lt;tagname&gt;可以推送一个本地标签；

  命令git push origin --tags可以推送全部未推送过的本地标签；

  命令git tag -d &lt;tagname&gt;可以删除一个本地标签；

  命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。

  git show tagname 可以查看tag的详细信息
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress的安装过程]]></title>
    <link href="http://yandongdabin.github.io/blog/2015/03/16/wo-de-bo-ke/"/>
    <updated>2015-03-16T17:39:53+08:00</updated>
    <id>http://yandongdabin.github.io/blog/2015/03/16/wo-de-bo-ke</id>
    <content type="html"><![CDATA[<p>关于markdown的一些知识和octopress的安装过程</p>

<!-- more -->


<p>废了几个小时的功夫，终于把octopress给安装完成了，现在我正在学习markdown的语法，所以会感到有一些的别扭。那么就用我这不太熟悉的markdown语法写下关于markdown和octopress的一些知识。</p>

<h1>markdown的基本语法</h1>

<h3>段落和换行</h3>

<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。  <strong>一定要注意这一点，即不同段落之间要有空行相隔.</strong><br/>
换行的话需要先在插入处先按入两个以上的空格然后回车，这样就插入了一个<code>&lt;br/&gt;</code></p>

<h3>列表</h3>

<p>markdown支持无序列表和有序列表两种形式，对于无序列表来说有:</p>

<pre><code>+list1
+list2
+list3
</code></pre>

<p>或者是：</p>

<pre><code>*list1
*list2
*list3
</code></pre>

<p>或者是：</p>

<pre><code>-list1
-list2
-list3
</code></pre>

<p>显示的效果是这样的：</p>

<ul>
<li>list1</li>
<li>list2</li>
<li>list3</li>
</ul>


<p>有序列表可以：</p>

<pre><code>1. list1
2. list2
3. list3
</code></pre>

<p> 显示的效果是这样的</p>

<ol>
<li>list1</li>
<li>list2</li>
<li>list3</li>
</ol>


<p> <strong>1.序号后面要跟空格（最多三个），并且序号的顺序和取值是无所谓的。</strong><br/>
<strong>2.有多个段落的时候，每个段落需要缩进一个TAB或者是4个空格。</strong></p>

<h3>区块</h3>

<h4>1.代码区块</h4>

<p>markdown的代码区块很简单，只要缩进一个TAB或者是四个空格即可，在生成代码时，这多余的空格或者是TAB会自动的去除，代码区块的结束是以不缩进的段结束的<br/>
<strong> 特别的如果在列表中放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</strong></p>

<h3>链接  此处出自 <a href="http://wowubuntu.com/markdown/">http://wowubuntu.com/markdown/</a></h3>

<p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p>

<p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>

<h4>行内链接</h4>

<p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>

<pre><code>This is [an example](http://example.com/ "Title") inline link.

[This link](http://example.net/) has no title attribute.
</code></pre>

<p>会产生：</p>

<pre><code>&lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://example.net/"&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;
</code></pre>

<p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>

<pre><code>See my [About](/about/) page for details.
</code></pre>

<h4>参考形式的链接</h4>

<p>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>

<pre><code>This is [an example][id] reference-style link.
</code></pre>

<p>你也可以选择性地在两个方括号中间加上一个空格：</p>

<pre><code>This is [an example] [id] reference-style link.
</code></pre>

<p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>

<p>链接内容定义的形式为：</p>

<p>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字
接着一个冒号
接着一个以上的空格或制表符
接着链接的网址
选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</p>

<p>链接网址也可以用尖括号包起来：</p>

<pre><code>[id]: &lt;http://example.com/&gt;  "Optional Title Here"
</code></pre>

<p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p>

<pre><code>[id]: http://example.com/longish/path/to/resource/here
"Optional Title Here"
</code></pre>

<p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p>

<p>链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：</p>

<pre><code>[link text][a]
[link text][A]
</code></pre>

<p><strong>隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 &ldquo;Google&rdquo; 链接到 google.com，你可以简化成：</strong></p>

<pre><code>[Google][]
</code></pre>

<p>然后定义链接内容：</p>

<pre><code>[Google]: http://google.com/
</code></pre>

<p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p>

<pre><code>Visit [Daring Fireball][] for more information.
</code></pre>

<p>然后接着定义链接：</p>

<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre>

<p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p>

<p>下面是一个参考式链接的范例：</p>

<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].
[1]: http://google.com/        "Google"
[2]: http://search.yahoo.com/  "Yahoo Search"
[3]: http://search.msn.com/    "MSN Search"
</code></pre>

<p>如果改成用链接名称的方式写：</p>

<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].
[google]: http://google.com/        "Google"   
[yahoo]:  http://search.yahoo.com/  "Yahoo Search"
[msn]:    http://search.msn.com/    "MSN Search"
</code></pre>

<p>上面两种写法都会产生下面的 HTML。</p>

<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"
title="Google"&gt;Google&lt;/a&gt; than from
&lt;a href="http://search.yahoo.com/" title="Yahoo Search"&gt;Yahoo&lt;/a&gt;
or &lt;a href="http://search.msn.com/" title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p>

<pre><code>I get 10 times more traffic from [Google](http://google.com/ "Google")
than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") or
[MSN](http://search.msn.com/ "MSN Search").
</code></pre>

<p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>

<h3>然后就是图片 强调等不一一列举</h3>

<h1>octopress的安装过程</h1>

<p>其实安装过程还是比较曲折的，主要是自己对linux不是特别的熟悉，并且还是首先掌握了git的一些基本知识。
首先列出我的参考链接：</p>

<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">git教程</a></p>

<p><a href="http://www.freehao123.com/octopress/">用Octopress免费静态博客系统在Github免费空间上搭建个人网站</a></p>

<p><a href="http://opoo.org/octopress/">http://opoo.org/octopress/</a></p>

<p><a href="http://www.jianshu.com/p/0ac2ac1a8e45">octopress博客搭建和个性化配置</a></p>

<p>主要的步骤就是：</p>

<blockquote><ol>
<li>安装必需的软件，包括git ruby ruby-dev</li>
</ol>


<p>2.下载octopress，并且首先用gem sources -remove url删除原有的url，然后gem sources -add ruby.taobao.com
同时修改Gemfile文件，把url换成淘宝的那个</p>

<p>3.在octopress文件夹内，依次执行gem install bundler；bundle install；rake install octopress安装成功</p>

<p>4.之后在github上新建repos，命名规则为username.github.io (<strong>之后octopress的_deploy文件夹即网站会部署在master分支上</strong>）</p>

<p>5.执行rake setup_github_pages与上述的repos地址关联，然后执行rake generate，rake deploy OK</p>

<p>6.之后可以添加插件，进行自定义的设置</p></blockquote>

<p>2015-3-16</p>
]]></content>
  </entry>
  
</feed>
